{"id":984272534,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1688273415,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/984272534/","is_pending":"Not Pending","title":"Prime Pairs With Target Sum","memory":"78.6 MB","code":"class Solution {\npublic:\n      \nvector<int> SieveOfEratosthenes(int n)\n{\n    vector<int>v;\n    bool prime[n + 1];\n    memset(prime, true, sizeof(prime));\n  \n    for (int p = 2; p * p <= n; p++) {\n\n        if (prime[p] == true) {\n            for (int i = p * p; i <= n; i += p)\n                prime[i] = false;\n        }\n    }\n \n    for (int p = 2; p <= n; p++)\n        if (prime[p])\n            v.push_back(p);\n    \n    return v;\n}\n    \n    vector<vector<int>> findPrimePairs(int n) {\n        vector<int> nums= SieveOfEratosthenes(n);\n        vector<vector<int>>ans;\n        int i=0,j=nums.size()-1;\n        while(i<=j){\n            if(nums[i]+nums[j]==n){\n                vector<int>tmp;\n                tmp.push_back(nums[i]);\n                tmp.push_back(nums[j]);\n                ans.push_back(tmp);\n                i++;\n                j--;\n            }else if(nums[i]+nums[j]<n){\n                i++;\n            }else j--;\n        }\n        \n        return ans;\n    }\n};","compare_resulttitle_slug":"prime-pairs-with-target-sum","has_notes":false,"flag_type":1}