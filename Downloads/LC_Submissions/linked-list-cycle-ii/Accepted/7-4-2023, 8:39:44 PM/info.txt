{"id":986207172,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1688483384,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/986207172/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n\n        ListNode* slow=head;\n        ListNode* fast= head;\n   \n          while(fast!=NULL&&fast->next!=NULL){\n              slow=slow->next;\n              fast= fast->next->next;\n              if(slow==fast)break;\n          }\n         if(slow != fast) return NULL;\n          slow=head;\n      while(fast!=NULL&&fast->next!=NULL){\n           if(slow==fast)return slow;\n          slow=slow->next;\n          fast=fast->next;\n         \n      }\n          return NULL;\n        \n    //      ListNode *slow = head, *fast = head;   \n    // while(fast && fast->next) {\n    //     slow = slow->next;\n    //     fast = fast->next->next;\n    //     if(slow == fast) break;\n    // }\n    // if(slow != fast) return NULL;\n    // fast = head;\n    // while(fast && fast->next) {\n    //     if(slow == fast) return slow;\n    //     slow = slow->next;\n    //     fast = fast->next;\n    // }\n    // return NULL;\n       \n    }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}