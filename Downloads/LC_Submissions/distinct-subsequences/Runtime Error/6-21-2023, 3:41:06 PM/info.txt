{"id":976251215,"lang":"cpp","lang_name":"C++","time":"4 months, 4 weeks","timestamp":1687342266,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/976251215/","is_pending":"Not Pending","title":"Distinct Subsequences","memory":"N/A","code":"class Solution {\npublic:\n    int numDistinct(string s, string t) {\n        int n = s.size();\n        int m = t.size();\n        \n        vector<vector<long long>> dp(n+1, vector<long long>(m+1, 0));\n        \n        // If t is an empty string, there is exactly one subsequence in s (empty string)\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 1;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (s[i-1] == t[j-1]) {\n                    // If the characters match, we have two choices:\n                    // 1. Include the current character in both s and t, and count the subsequence\n                    // 2. Exclude the current character from s, and count the subsequence\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n                } else {\n                    // If the characters don't match, we can only exclude the current character from s\n                    dp[i][j] = dp[i-1][j];\n                }\n            }\n        }\n        \n        return dp[n][m];\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111111111111110000","title_slug":"distinct-subsequences","has_notes":false,"flag_type":1}