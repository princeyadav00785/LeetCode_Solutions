{"id":999832713,"lang":"java","lang_name":"Java","time":"3 months, 4 weeks","timestamp":1689909090,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/999832713/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"43.2 MB","code":"class Solution {\n       public int findNumberOfLIS(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        \n        int len = nums.length;\n        // dp[i] means the lengh of LIS ending at i\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1);\n        // cnt[i] means # LIS ending at i\n        int[] cnt = new int[len];\n        \n        int ret = 0, max = 1;\n        for (int i = 0; i < len; i++) {\n            int count = 1;\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    if (1 + dp[j] > dp[i]) {\n                        count = cnt[j];\n                        dp[i] = 1 + dp[j];\n                    } else if (1 + dp[j] == dp[i]) {\n                        count += cnt[j];\n                    }\n                }\n            }\n            cnt[i] = count;\n            \n            if (dp[i] > max) {\n                ret = count;\n                max = dp[i];\n            } else if (dp[i] == max) {\n                ret += count;\n            }\n        }\n        return ret;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}