{"id":999822865,"lang":"cpp","lang_name":"C++","time":"3 months, 4 weeks","timestamp":1689907785,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/999822865/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    void fxn(vector<int>nums,vector<int>v,int mxm,int ind,int &cnt,int prev){\n        if(ind>nums.size()-1){if(v.size()==mxm){cnt++;}return;}\n        if(nums[ind]>prev){\n            v.push_back(nums[ind]);\n            fxn(nums,v,mxm,ind+1,cnt,nums[ind]);\n            v.pop_back();\n        }\n         fxn(nums,v,mxm,ind+1,cnt,prev);\n        \n    }\n    \n    int findNumberOfLIS(vector<int>& nums) {    \n        vector<int>dp(nums.size(),1);\n        for(int i=0;i<nums.size();i++){\n            for(int j=0;j<i;j++){\n                if(nums[j]<nums[i]){\n                    dp[i]= max(dp[i],1+dp[j]);\n                }\n            }\n        }\n        int mxm=INT_MIN;\n        for(int i=0;i<nums.size();i++){\n            if(dp[i]>mxm)mxm=dp[i];\n        }\n    \n        int cnt=0;\n        for(int i=0;i<nums.size();i++)if(dp[i]==mxm)cnt++;\n        \n        vector<int>v;\n        int c=0;\n        fxn(nums,v,mxm,0,c,INT_MIN);\n        return c;\n    }\n};","compare_result":"1111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}