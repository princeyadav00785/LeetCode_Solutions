{"id":983150214,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1688138988,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/983150214/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"9 MB","code":"#include <string>\n#include <vector>\n#include <climits>\n\nclass Solution {\npublic:\n    int minCut(std::string s) {\n        int n = s.size();\n        std::vector<std::vector<bool>> isPalindrome(n, std::vector<bool>(n, false));\n        std::vector<int> dp(n, INT_MAX);\n\n        // Pre-calculate whether substrings are palindromes\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                if (s[i] == s[j] && (i - j <= 1 || isPalindrome[j + 1][i - 1])) {\n                    isPalindrome[j][i] = true;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (isPalindrome[0][i]) {\n                dp[i] = 0; // No cuts needed if the entire substring is a palindrome\n            }\n            else {\n                for (int j = 0; j < i; j++) {\n                    if (isPalindrome[j + 1][i]) {\n                        dp[i] = std::min(dp[i], dp[j] + 1);\n                    }\n                }\n            }\n        }\n\n        return dp[n - 1];\n    }\n};\n","compare_result":"1111111111111111111111111111111111111","title_slug":"palindrome-partitioning-ii","has_notes":false,"flag_type":1}