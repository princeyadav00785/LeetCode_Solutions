{"id":1038611190,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1693668887,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1038611190/","is_pending":"Not Pending","title":"Count K-Subsequences of a String With Maximum Beauty","memory":"13 MB","code":"class Solution {\npublic:\n    \n    int calculateCombinationsModM(int totalCount, int selectCount, int modulo) {\n        if (selectCount == 0)\n            return 1;\n    \n        vector<int> factorialArray(totalCount + 1);\n        factorialArray[0] = 1;\n        \n        // Calculate factorial modulo modulo for each number up to totalCount\n        for (int i = 1; i <= totalCount; i++)\n            factorialArray[i] = (1LL * factorialArray[i - 1] * i) % modulo;\n          int result = factorialArray[totalCount];\n        result = (1LL * result * calculateModularInverse(factorialArray[selectCount], modulo)) % modulo;\n        result = (1LL * result * calculateModularInverse(factorialArray[totalCount - selectCount], modulo)) % modulo;\n        \n        return result;\n    }\n\n    int calculateModularInverse(int number, int modulo) {\n        int modulo0 = modulo;\n        int y = 0, x = 1;\n        \n        while (number > 1) {\n            int quotient = number / modulo;\n            int temp = modulo;\n             modulo = number % modulo;\n            number = temp;\n            temp = y;\n            y = x - quotient * y;\n            x = temp;\n        }\n        \n        if (x < 0)\n            x += modulo0;\n        \n        \n        \n                return x;\n    }\n    \n    int countKSubsequencesWithMaxBeauty(string inputString, int kValue) {\n        int modulo = 1e9 + 7;\n        unordered_map<char, int> characterCountMap;\n        \n        for (auto character : inputString) {\n            characterCountMap[character]++;\n        }\n        \n        if (characterCountMap.size() < kValue) {\n            return 0;\n        }\n        \n        vector<int> characterCounts;\n for (auto characterCountPair : characterCountMap) {\n            characterCounts.push_back(characterCountPair.second);\n        }\n        \n        sort(characterCounts.begin(), characterCounts.end());\n        reverse(characterCounts.begin(), characterCounts.end());\n        \n        int answer = 1;\n        int totalCount = characterCounts.size();\n        int lowestCount = characterCounts[kValue - 1];\n        int totalLowestCount = 0, currentLowestCount = 0;\n        \n        for (int i = 0; i < totalCount; i++) {\n            if (i < kValue) {                answer = (1LL * answer * characterCounts[i]) % modulo;\n                if (characterCounts[i] == lowestCount) {\n                    currentLowestCount++;\n                }\n            }\n            \n            if (characterCounts[i] == lowestCount) {\n                totalLowestCount++;\n            }\n        }\n        \n        answer = (1LL * answer * calculateCombinationsModM(totalLowestCount, currentLowestCount, modulo)) % modulo;\n  return answer;\n    }\n};","compare_resulttitle_slug":"count-k-subsequences-of-a-string-with-maximum-beauty","has_notes":false,"flag_type":1}