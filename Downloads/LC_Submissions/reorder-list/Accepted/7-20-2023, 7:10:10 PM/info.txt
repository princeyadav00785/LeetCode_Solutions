{"id":999364989,"lang":"java","lang_name":"Java","time":"3 months, 4 weeks","timestamp":1689860410,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/999364989/","is_pending":"Not Pending","title":"Reorder List","memory":"45.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n  public class Solution {\n    \n    public void reorderList(ListNode head) {\n      if (head == null || head.next == null)\n          return;\n\n      ListNode prev = null, slow = head, fast = head, l1 = head;\n      \n      while (fast != null && fast.next != null) {\n        prev = slow;\n        slow = slow.next;\n        fast = fast.next.next;\n      }\n      \n      prev.next = null;\n      \n     \n      ListNode l2 = reverse(slow);\n      \n      \n      merge(l1, l2);\n    }\n    \n    ListNode reverse(ListNode head) {\n      ListNode prev = null, curr = head, next = null;\n      \n      while (curr != null) {\n        next = curr.next;\n        curr.next = prev;\n        prev = curr;\n        curr = next;\n      }\n      \n      return prev;\n    }\n    \n    void merge(ListNode l1, ListNode l2) {\n      while (l1 != null) {\n        ListNode n1 = l1.next, n2 = l2.next;\n        l1.next = l2;\n        \n        if (n1 == null)\n          break;\n            \n        l2.next = n1;\n        l1 = n1;\n        l2 = n2;\n      }\n    }\n\n  }","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}