{"id":1042128711,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1694005540,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1042128711/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"8.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* head, int k) {\n        int n =0;\n        ListNode* temp=head;\n        while(temp){\n         n++;\n         temp=temp->next;\n        }\n        vector<ListNode*>v(k,NULL);\n        if(head==NULL)return v;\n        temp=head;\n        int i=0,t=min(k,n);\n        while(i<t){\n            int a=n%k;\n            if(a!=0){a=n/k+1; n=n-1;}\n            else if(a==0)a=n/k;\n           \n            cout<<i<<\" \";\n            if(temp)v[i]=temp;\n            \n            i++;\n            if(a)a--;\n           while(a--){\n               if(temp)\n               temp=temp->next;\n           }\n            ListNode* dummy=temp;\n            if(temp)\n           dummy= temp->next;\n            if(temp)\n            temp->next=NULL;\n            if(dummy)\n                temp=dummy;\n        }\n        return v;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts","has_notes":false,"flag_type":1}