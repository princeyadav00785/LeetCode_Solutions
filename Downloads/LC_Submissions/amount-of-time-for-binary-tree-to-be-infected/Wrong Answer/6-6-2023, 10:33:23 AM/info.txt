{"id":964883044,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1686027803,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/964883044/","is_pending":"Not Pending","title":"Amount of Time for Binary Tree to Be Infected","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int fxn(TreeNode*root){\n        if(root==NULL){\n            return 0;\n        }\n        int l=fxn(root->left);\n        int r= fxn(root->right);\n        return 1+max(l,r);\n    }\n    \n    int lvl(TreeNode*root , int start){\n        int cnt=0;\n        queue<TreeNode*>q;\n        q.push(root);\n        int a=0;\n        while(!q.empty()){\n            int n= q.size();\n            for(int i=0;i<n;i++){\n                TreeNode* temp=q.front();\n            q.pop();\n            if(temp->left){q.push(temp->left);}\n            if(temp->right){q.push(temp->right);}\n          \n            if(temp->val==start){a=1;}\n            }\n              cnt++;\n            if(a==1){break;}\n        }\n        \n        \n        return cnt;\n    }\n    \n    int amountOfTime(TreeNode* root, int start) {\n     int h= fxn(root)-1; \n        int level= lvl(root,start)-1;\n        // cout<<h<<\" \"<<\"l->\"<<level;\n        return level+h;\n    }\n};","compare_result":"11100001000000110110111111111010101000111010011000010000010000000101001000001101","title_slug":"amount-of-time-for-binary-tree-to-be-infected","has_notes":false,"flag_type":1}