{"id":1001110755,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1690042355,"status":10,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/1001110755/","is_pending":"Not Pending","title":"Knight Probability in Chessboard","memory":"30.3 MB","code":"class Solution {\nprivate:\n    unordered_map<int, unordered_map<int, unordered_map<int, double>>>dp;\npublic:\n    double knightProbability(int N, int K, int r, int c) {\n        if(dp.count(r) && dp[r].count(c) && dp[r][c].count(K)) return dp[r][c][K];\n        if(r < 0 || r >= N || c < 0 || c >= N) return 0;\n        if(K == 0) return 1;\n        double total = knightProbability(N, K - 1, r - 1, c - 2) + knightProbability(N, K - 1, r - 2, c - 1) \n                     + knightProbability(N, K - 1, r - 1, c + 2) + knightProbability(N, K - 1, r - 2, c + 1) \n                     + knightProbability(N, K - 1, r + 1, c + 2) + knightProbability(N, K - 1, r + 2, c + 1) \n                     + knightProbability(N, K - 1, r + 1, c - 2) + knightProbability(N, K - 1, r + 2, c - 1);\n        double res = total / 8;\n        dp[r][c][K] = res;\n        return res;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"knight-probability-in-chessboard","has_notes":false,"flag_type":1}