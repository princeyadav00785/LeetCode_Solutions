{"id":1041819997,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1693976381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1041819997/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverse(ListNode* head){\n        ListNode* prev=NULL;\n        ListNode* curr = head;\n        while(curr){\n            ListNode* nxt = curr->next;\n            curr->next=prev;\n            prev=curr;\n            curr= nxt;\n            \n        }\n        return prev;\n    }\n  int pairSum(ListNode* head) {\n    ListNode* newhead = reverse(head);\n    int mxm = INT_MIN;\n    ListNode* curr1 = head;\n    ListNode* curr2 = newhead;\n    \n    while (curr1) {\n        int a = curr1->val + curr2->val;\n        mxm = max(a, mxm);\n        curr1 = curr1->next;\n        curr2 = curr2->next;\n    }\n    \n    // You can optionally reverse the list back to its original state if needed.\n    // reverse(newhead);\n    \n    return mxm;\n}\n\n};","compare_result":"1110000000100111110100000000000000000000000000","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}