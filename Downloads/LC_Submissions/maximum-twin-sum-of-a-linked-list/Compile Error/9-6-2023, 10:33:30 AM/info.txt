{"id":1041822567,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1693976610,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1041822567/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int maxTwinSum(ListNode* head) {\n        // Count the number of nodes in the linked list.\n        int n = 0;\n        ListNode* current = head;\n        while (current) {\n            n++;\n            current = current->next;\n        }\n\n        // Calculate the maximum twin sum.\n        int maxSum = INT_MIN;\n        current = head;\n        for (int i = 0; i < n / 2; i++) {\n            int twinIndex = n - 1 - i;\n            ListNode* twinNode = getNodeAt(head, twinIndex);\n            int sum = current->val + twinNode->val;\n            maxSum = max(maxSum, sum);\n            current = current->next;\n        }\n\n        return maxSum;\n    }\n\n    // Helper function to get the node at a specific index.\n    ListNode* getNodeAt(ListNode* head, int index) {\n        ListNode* current = head;\n        for (int i = 0; i < index; i++) {\n            current = current->next;\n        }\n        return current;\n    }\n};\n","compare_result":null,"title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}