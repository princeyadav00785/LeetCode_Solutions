{"id":1083176468,"lang":"cpp","lang_name":"C++","time":"3 weeks, 2 days","timestamp":1698168530,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1083176468/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int>v;\n    void traversal(TreeNode* root){\n        if(root==NULL)return;\n        v.push_back(root->val);\n        if(root->right)traversal(root->right);\n        if(root->left)traversal(root->left);\n        return ;\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        if(root==NULL||(!root->left&&root->right))return root;\n        traversal(root);\n        sort(v.begin(),v.end());\n        TreeNode* ans= new TreeNode(v[0]);\n        TreeNode* result=ans;\n        \n        for(int i=1;i<v.size();i++){\n            TreeNode*temp= new TreeNode(v[i]);\n            ans->right= temp;\n            ans=temp;\n            cout<<v[i];\n        }\n        return result;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}