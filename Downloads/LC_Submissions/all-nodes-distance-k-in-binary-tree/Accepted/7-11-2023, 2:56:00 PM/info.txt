{"id":991696458,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1689067560,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/991696458/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"15 MB","code":"class Solution {\npublic:\n    vector<int> ans;   \n    map<TreeNode*, TreeNode*> parent;  // son=>parent  \n    set<TreeNode*> visit;    //record visied node\n    \n    void findParent(TreeNode* node){\n        if(!node ) return;\n        if( node->left ){\n            parent[node->left] = node;\n            findParent(node->left);\n        }\n        if( node->right){\n            parent[node->right] = node;\n            findParent(node->right);\n        }\n    }\n    \n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n        if( !root ) return {};\n        \n        findParent(root);\n        dfs(target, K );\n        return ans;\n    }\n    void dfs( TreeNode* node, int K){\n        if( visit.find(node) != visit.end() )\n            return;\n        visit.insert(node);\n        if( K == 0 ){\n            ans.push_back(node->val);\n            return;\n        }\n        if( node->left ){\n            dfs(node->left, K-1);\n        }\n        if( node->right){\n            dfs(node->right, K-1);\n        }\n        TreeNode* p = parent[node];\n        if( p )\n            dfs(p, K-1);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}