{"id":927235721,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1680530335,"status":10,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/927235721/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"63.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    TreeNode* fxn(vector<int>&v,int s, int end){\n        if(s>end){return NULL;}\n        int mid  =(s+end)/2;\n        TreeNode* root=new TreeNode(v[mid]);\n        root->right=fxn(v,mid+1,end);\n        root->left=fxn(v,s,mid-1);\n        return root;\n    }\n    void inorder(vector<int>&v , TreeNode* root){\n        if(root==NULL){return ;}\n        inorder(v,root->left);\n        v.push_back(root->val);\n        inorder(v,root->right);\n        return ;\n        \n    }\n    TreeNode* balanceBST(TreeNode* root) {\n        if(root==NULL){return NULL;}\n        vector<int> v;\n        inorder(v,root);\n        int s=0,end=v.size()-1;\n        return fxn(v,s,end);\n        \n        \n//          public static TreeNode Balance( ArrayList<Integer> list,int st,int end){\n//         if(st>end){\n//             return null;\n//         }\n//         int mid=(st+end)/2;\n//         TreeNode root=new TreeNode(list.get(mid));\n//         root.left=Balance(list,st,mid-1);\n//         root.right=Balance(list,mid+1,end);\n//         return root;\n//     }\n//     public static void inorder(TreeNode root, ArrayList<Integer> list){\n//           if(root==null){\n//             return;\n//         }\n//         inorder(root.left,list);\n//         list.add(root.val);\n//         inorder(root.right,list);\n//     }\n//     public TreeNode balanceBST(TreeNode root) {\n//         ArrayList<Integer> list =new ArrayList<>();\n//       if(root==null){\n//         return null;\n//       }\n//         inorder(root,list);\n      \n//         TreeNode root1=Balance(list,0,list.size()-1);\n//         return root1;\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}