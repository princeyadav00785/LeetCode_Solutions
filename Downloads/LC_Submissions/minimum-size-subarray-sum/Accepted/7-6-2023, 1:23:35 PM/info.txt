{"id":987598228,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1688630015,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/987598228/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"28 MB","code":"class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        // sort(nums.begin(),nums.end());\n        // int cnt=0,sum=0;\n        // for(int i=nums.size()-1;i>-1;i--){\n        //     sum+=nums[i];cnt++;\n        //     if(sum>=target) break;\n        // }\n        // cout<<sum;\n        // // return cnt;\n        // if(cnt==nums.size()&&sum<target){\n        //     return 0;\n        // }else return cnt;\n        \n            int left=0;\n        int right=0;\n        int minlen=INT_MAX;\n        int sum=0;\n        while(right<nums.size())\n        {\n            sum+=nums[right++];\n            while(sum>=target)\n            {\n                minlen=min(minlen,right - left);\n                sum-=nums[left++];\n            }\n        }\n        return(minlen==INT_MAX)?0:minlen; \n    }\n};","compare_result":"11111111111111111111","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}