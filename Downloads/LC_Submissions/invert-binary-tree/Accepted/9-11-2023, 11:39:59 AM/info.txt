{"id":1046265338,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1694412599,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1046265338/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"9.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* helper(TreeNode* root){\n     if(root == NULL)\n            return NULL;\n\n        if(root->left == NULL && root->right == NULL)\n            return NULL;\n\n        if(root->right == NULL) {\n            root->right = root->left;\n            root->left = NULL;\n        }\n        else if(root->left == NULL) {\n            root->left = root->right;\n            root->right = NULL;\n        }\n\n\n        else {\n            TreeNode* temp = root->left;\n        root->left = root->right;\n        root->right = temp;\n        }\n\n        helper(root->left);\n        helper(root->right);\n\n        return root;\n        \n    }\n    \n    TreeNode* invertTree(TreeNode* root) {\n        if(root==NULL)return root;\n        if(!root->left&&!root->right)return root;\n        TreeNode* ans= helper(root);\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree","has_notes":false,"flag_type":1}