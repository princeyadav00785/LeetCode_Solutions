{"id":978282724,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1687582752,"status":10,"status_display":"Accepted","runtime":"390 ms","url":"/submissions/detail/978282724/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"178.1 MB","code":"class Solution {\npublic:\n bool helper(int idx,int k,vector<int>&arr,vector<vector<int>>&dp)\n    {\n        if(idx == arr.size())return k==0;\n        if(k == 0)\n        {\n            return true;\n        }\n        if(dp[idx][k] != -1)return dp[idx][k];\n\n        bool notpick = helper(idx + 1,k,arr,dp);\n        bool pick = false;\n        if(k>=arr[idx])\n        {\n            pick = helper(idx+1,k - arr[idx],arr,dp) ;\n        }  \n        return dp[idx][k] = pick | notpick;\n    }\n\n    bool canPartition(vector<int>& nums) {\n        // sort(nums.begin(),nums.end());\n        int totalsum = accumulate(nums.begin(),nums.end(),0);\n        if(totalsum%2)return false;\n        vector<vector<int>>dp(nums.size(),vector<int>(totalsum+1,-1));\n        return helper(0,totalsum/2,nums,dp);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}