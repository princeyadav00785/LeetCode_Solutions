{"id":977147561,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1687443238,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/977147561/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"6.3 MB","code":"// class Solution {\n// public:\n//     bool isMatch(string s, string p) {\n//         int m = s.size(), n = p.size();\n//         vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));\n//         dp[0][0] = true;\n//         for (int i = 0; i <= m; i++) {\n//             for (int j = 1; j <= n; j++) {\n//                 if (p[j - 1] == '*') {\n//                     dp[i][j] = dp[i][j - 2] || (i && dp[i - 1][j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));\n//                 } else {\n//                     dp[i][j] = i && dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');\n//                 }\n//             }\n//         }\n//         return dp[m][n];\n//     }\n// };\n// And you may further reduce the memory usage down to two vectors (O(n)).\n\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int m = s.size(), n = p.size();\n        vector<bool> pre(n + 1, false), cur(n + 1, false);\n        cur[0] = true;\n        for (int i = 0; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (p[j - 1] == '*') {\n                    cur[j] = cur[j - 2] || (i && pre[j] && (s[i - 1] == p[j - 2] || p[j - 2] == '.'));\n                } else {\n                    cur[j] = i && pre[j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');\n                }\n            }\n            fill(pre.begin(), pre.end(), false);\n\t\t\tswap(pre, cur);\n        }\n        return pre[n];\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}