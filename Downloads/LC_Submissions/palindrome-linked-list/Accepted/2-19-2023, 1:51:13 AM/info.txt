{"id":900564551,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1676751673,"status":10,"status_display":"Accepted","runtime":"817 ms","url":"/submissions/detail/900564551/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"128.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    public:\n    vector<int> traversal(ListNode* head){\n        vector<int> v;\n        ListNode* temp=head;\n        if(head == NULL){\n            return v;\n        }\n        while(temp!=NULL){\n            v.push_back(temp->val);\n            temp=temp->next;\n        }\n        return v;\n    }\n\n    bool isPalindrome(ListNode* head) {\n        // ListNode* Temp= head;\n        // if(head ==NULL|| head->next==NULL){\n        //     return true;\n        // }\n        // while(temp->next!=NULL){\n        //     temp=temp->next;\n        // }\n        vector<int> v1= traversal(head);\n        for(int i=0;i<v1.size();i++){\n            cout<<v1[i]<<\" \";       }\n        for(int i=0;i<v1.size()/2;i++){\n           if(v1[i]!=v1[v1.size()-1-i]){\n                //  cout<< v1[i]<<\" \"<<v1[v1.size()-1-i]<<\" \"<<i;\n               return false;\n           }    \n          \n        }\n        return true;\n       \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}