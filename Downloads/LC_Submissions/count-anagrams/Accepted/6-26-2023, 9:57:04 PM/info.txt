{"id":980167018,"lang":"python3","lang_name":"Python3","time":"4Â months, 3Â weeks","timestamp":1687796824,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/980167018/","is_pending":"Not Pending","title":"Count Anagrams","memory":"17.6 MB","code":"class Solution:\n    def countAnagrams(self, s: str) -> int:\n        mod = 10**9 + 7\n        ans = 1\n        n = len(s)\n        totalChars = 0\n        freqMap = {}\n\n        for i in range(n):\n            if s[i] == ' ' or i == n - 1:\n                if i == n - 1:\n                    freqMap[s[i]] = freqMap.get(s[i], 0) + 1\n                    totalChars += 1\n\n                t = 1\n                for freq in freqMap.values():\n                    t = (t * self.factorial(freq, mod)) % mod\n\n                ans = (ans * self.factorial(totalChars, mod)) % mod\n                ans = (ans * self.modularInverse(t, mod)) % mod\n\n                totalChars = 0\n                freqMap = {}\n            else:\n                freqMap[s[i]] = freqMap.get(s[i], 0) + 1\n                totalChars += 1\n\n        return ans\n\n    def factorial(self, n: int, mod: int) -> int:\n        fact = 1\n        for i in range(2, n+1):\n            fact = (fact * i) % mod\n        return fact\n\n    def modularInverse(self, a: int, mod: int) -> int:\n        b = mod - 2\n        result = 1\n\n        while b > 0:\n            if b & 1:\n                result = (result * a) % mod\n            a = (a * a) % mod\n            b >>= 1\n\n        return result\n","compare_result":"11111111111111111111111111111111111111111","title_slug":"count-anagrams","has_notes":false,"flag_type":1}