{"id":964598191,"lang":"cpp","lang_name":"C++","time":"5 months, 2 weeks","timestamp":1685989008,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/964598191/","is_pending":"Not Pending","title":"Smallest Subsequence of Distinct Characters","memory":"6.3 MB","code":"class Solution {\npublic:\n    string smallestSubsequence(string s) {\n       vector<int> lastIndex(26, 0);\n        for (int i = 0; i < s.length(); i++){\n            lastIndex[s[i] - 'a'] = i; // track the lastIndex of character presence\n        }\n        \n        vector<bool> seen(26, false); // keep track seen\n        stack<char> st;\n        \n        for (int i = 0; i < s.size(); i++) {\n            int curr = s[i] - 'a';\n            if (seen[curr]) continue; // if seen continue as we need to pick one char only\n            while(st.size() > 0 && st.top() > s[i] && i < lastIndex[st.top() - 'a']){\n                seen[st.top() - 'a'] = false; // pop out and mark unseen\n                st.pop();\n            }\n            st.push(s[i]); // add into stack\n            seen[curr] = true; // mark seen\n        }\n        \n        string ans = \"\";\n        while (st.size() > 0){\n            ans += st.top();\n            st.pop();\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subsequence-of-distinct-characters","has_notes":false,"flag_type":1}