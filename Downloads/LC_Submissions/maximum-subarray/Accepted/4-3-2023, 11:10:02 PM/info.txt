{"id":927361561,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1680543602,"status":10,"status_display":"Accepted","runtime":"129 ms","url":"/submissions/detail/927361561/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"70.6 MB","code":"class Solution {\npublic:\n    int fxn(vector<int>& nums, int i,int n,int sum,int &ans){\n        \n        if(i==n){\n            return sum;\n        }\n        \n        ans= max(fxn(nums,i+1,n,sum+nums[i],ans),fxn(nums,i+1,n,0,ans));\n        \n        return ans;\n    }\n\n    int maxSubArray(vector<int>& nums) {\n        \n         vector<int> dp(nums);\n        for(int i = 1; i < size(nums); i++) \n            dp[i] = max(nums[i], nums[i] + dp[i-1]);        \n        return *max_element(begin(dp), end(dp));\n        \n        \n        // int index=0,n=nums.size(),sum=0,ans=0;\n        // fxn(nums,index,n,sum,ans);\n        // return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false,"flag_type":1}