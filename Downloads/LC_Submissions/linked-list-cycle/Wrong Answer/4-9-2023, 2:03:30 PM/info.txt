{"id":930625394,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1681029210,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/930625394/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode* slow = head;\n         ListNode* fast = head;\n         if(head==NULL||head->next==NULL){\n             return false;\n         }\n          while(fast!=NULL&&fast->next!=NULL){\n              if(slow==fast){\n                  return true;\n              }\n              slow =slow->next;\n              fast=fast->next->next;\n          }\n           return false;\n    }\n};","compare_result":"11111101110111011001000","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}