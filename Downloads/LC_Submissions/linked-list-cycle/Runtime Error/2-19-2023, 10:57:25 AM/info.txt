{"id":900771074,"lang":"cpp","lang_name":"C++","time":"9Â months","timestamp":1676784445,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/900771074/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n       \n         if(head==NULL){\n             return false;}\n        ListNode* slow = head;\n         ListNode* fast = head;\n\n          while(fast!=NULL||fast->next!=NULL||slow!=NULL){\n              if(fast==NULL||fast->next==NULL){\n                  return false;\n              }\n               slow =slow->next;\n              fast=fast->next->next;\n              \n              if(slow==fast){\n                     cout<<\"hhhhh\";\n                  return true;\n               \n              }\n             \n             \n          }\n           return true;\n    }\n};","compare_result":"11111100000000000000000","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}