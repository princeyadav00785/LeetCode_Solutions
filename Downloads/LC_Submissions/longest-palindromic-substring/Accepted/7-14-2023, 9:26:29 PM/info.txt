{"id":994421913,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1689350189,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/994421913/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"231.1 MB","code":"// class Solution {\n// public: \n//     int dp[1001][1001];\n//     int fxn(string s,string t,int n){\n//         for(int i=0;i<=n;i++){\n//             for(int j=0;j<=n;j++){\n//                 if(i==0||j==0){\n//                     dp[i][j]=0;\n//                 }\n//                 else{\n//                     if(s[i-1]==t[j-1]){\n//                         dp[i][j]=1+dp[i-1][j-1];\n//                     }else {\n//                         dp[i][j]=max(dp[i][j-1],dp[i-1][j]);\n//                         // dp[i][j]=0;\n//                     }\n//                 }\n//             }\n//         }\n//         return dp[n][n];\n//     }\n    \n//     string fxn2(string s,int n){\n//         string a=\"\";\n//         int i=n,j=n;\n//         while(i>1||j>1){\n//             if(dp[i][j]==dp[i-1][j-1]){\n//                 a.push_back(s[i]);\n//                 i--;\n//                 j--;\n//             }else if(dp[i][j]==dp[i-1][j]){\n//                 i--;\n//             }else j--;\n//         }\n//         return a;\n//     }\n     \n//     string longestPalindrome(string s) {\n//      string t=s;\n//         int n= s.size();\n//         reverse(t.begin(),t.end());\n//         int a= fxn(s,t,n);\n//     cout<< a<<\" \";\n       \n//        string ans = fxn2(s,n);\n//         return ans;\n//     }\n// };\n\n\n\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        string str;\n        int res=0;\n        string s1=s;\n        string s2=s;\n        reverse(s2.begin(), s2.end());\n        int m=s1.size();\n        int n=s2.size();\n        int t[m+1][n+1];\n\t\t//initialization\n        for(int i=0; i<m+1; i++)\n            for(int j=0; j<n+1; j++)\n            {\n                if(i==0 || j==0)\n                    t[i][j]=0;\n            }\n        \n        //filing t matrix keep checking when last compared is equal that is the point of doubt and we will do some \n\t\t//calculation or something \n\t\t\n        for(int i=1; i<m+1; i++)\n            for(int j=1; j<n+1; j++)\n            {\n                if(s1[i-1]==s2[j-1])\n                {\n                    t[i][j]=1+t[i-1][j-1];\n                    if(res<t[i][j])\n                    {\n                        string temp=s.substr(i-t[i][j],t[i][j]);\n                        string temp2=temp;\n                        reverse(temp2.begin(), temp2.end());\n                        if(temp==temp2) //we just want to check if matched substring is palindrome or not\n                        {\n                        res=t[i][j];\n                        str=temp;\n                        }\n                    }\n                }\n                else\n                    t[i][j]=0;\n            }\n        return str;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}