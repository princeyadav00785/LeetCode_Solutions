{"id":1094977878,"lang":"cpp","lang_name":"C++","time":"1Â week","timestamp":1699507650,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1094977878/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* fxn(TreeNode* root, int low, int high){\n        if(!root)return NULL;\n        if(root->val>high)return root->left;\n        if(root->val<low)return root->right;\n        root->right= fxn(root->right,low,high);\n        root->left=fxn(root->left,low,high);\n       return root;\n    }\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n       return fxn(root,low,high);\n       \n    }\n};","compare_result":"111111111111101011111101111000000000000000000001010000000000000000000000000000","title_slug":"trim-a-binary-search-tree","has_notes":false,"flag_type":1}