{"id":1062923565,"lang":"cpp","lang_name":"C++","time":"1 month, 2 weeks","timestamp":1696066104,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/1062923565/","is_pending":"Not Pending","title":"132 Pattern","memory":"49 MB","code":"class Solution {\npublic:\n    bool find132pattern(vector<int>& nums) {\n        int length = nums.size();\n\n        // Check if the array has less than 3 elements\n        if (length < 3)\n            return false;\n\n        // Stack to keep track of decreasing elements.\n        stack<int> decreasingStack;\n\n        // Maximum value of the third element in the 132 pattern.\n        int maxThirdElement = INT_MIN;\n\n        // Traverse the array from right to left\n        for (int i = length - 1; i >= 0; i--) {\n            int currentNumber = nums[i];\n\n            // Check for 132 pattern\n            if (currentNumber < maxThirdElement)\n                return true;  // Found a 132 pattern.\n            // if(!decreasingStack.empty())\n            //    {int a=decreasingStack.top();\n            // cout<<a<<\" \";}\n            \n            // Maintain the stack with decreasing elements\n            while (!decreasingStack.empty() && decreasingStack.top() < currentNumber) {\n                maxThirdElement = decreasingStack.top();\n                decreasingStack.pop();\n            }\n\n            // Push the current element onto the stack.\n            decreasingStack.push(currentNumber);\n        }\n\n        return false; // No 132 pattern found\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"132-pattern","has_notes":false,"flag_type":1}