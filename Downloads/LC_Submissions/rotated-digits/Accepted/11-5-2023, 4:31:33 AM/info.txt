{"id":1091604441,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1699138893,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1091604441/","is_pending":"Not Pending","title":"Rotated Digits","memory":"6.5 MB","code":"class Solution {\npublic:\n    int ans = 0;\n \n    map<int, int> mp;\n\n    void fxn(int n) {\n\n        string s = to_string(n);\n        string l = \"\";\n        int m = s.length();\n        for (int i = 0; i < m; i++) {\n            int a = s[i] - '0';\n            int b = mp[a];\n            if (b == -1) {\n                return; // Break the loop if b is -1\n            } else {\n                char c = (b + '0');\n                l += c;\n            }\n        }\n\n        if (l.empty()) {\n            return; // Handle the case where 'l' is empty\n        }\n\n        int x = stoi(l);\n        if (s != l) {\n            cout<<l<<endl;\n              ans++;\n        }\n    }\n\n    int rotatedDigits(int n) {\n  \n        mp.insert({0, 0});\n        mp.insert({1, 1});\n        mp.insert({2, 5});\n        mp.insert({3, -1});\n        mp.insert({4, -1});\n        mp.insert({5, 2});\n        mp.insert({6, 9});\n        mp.insert({7, -1});\n        mp.insert({8, 8});\n        mp.insert({9, 6});\n\n        for (int i = 1; i <= n; i++) {\n            fxn(i);\n        }\n        return ans;\n    }\n};\n","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"rotated-digits","has_notes":false,"flag_type":1}