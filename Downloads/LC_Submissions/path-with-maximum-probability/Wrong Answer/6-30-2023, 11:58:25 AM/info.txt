{"id":982855961,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1688106505,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/982855961/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"N/A","code":"#include <iostream>\n#include <vector>\n#include <queue>\n#include <utility>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {\n        vector<vector<pair<int, double>>> adj(n);\n        for (int i = 0; i < edges.size(); i++) {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            double p = succProb[i];\n            adj[u].push_back({v, p});\n            adj[v].push_back({u, p});\n        }\n        \n        vector<double> prob(n, 0.0);\n        prob[start] = 1.0;\n        \n        vector<bool> visited(n, false);\n        visited[start] = true;\n        \n        priority_queue<pair<double, int>> pq;\n        pq.push({1.0, start});\n        \n        while (!pq.empty()) {\n            auto curr = pq.top();\n            pq.pop();\n            double currProb = curr.first;\n            int currNode = curr.second;\n            \n            if (currNode == end) {\n                return currProb;\n            }\n            \n            if (currProb < prob[currNode]) {\n                continue;\n            }\n            \n            for (auto neighbor : adj[currNode]) {\n                int nextNode = neighbor.first;\n                double edgeProb = neighbor.second;\n                \n                double newProb = currProb * edgeProb;\n                if (newProb > prob[nextNode]) {\n                    prob[nextNode] = newProb;\n                    if (!visited[nextNode]) {\n                        pq.push({newProb, nextNode});\n                        visited[nextNode] = true;\n                    }\n                }\n            }\n        }\n        \n        return 0.0;\n    }\n};\n","compare_result":"011011111100000000","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}