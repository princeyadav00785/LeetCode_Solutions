{"id":974510154,"lang":"cpp","lang_name":"C++","time":"5Â months","timestamp":1687153634,"status":10,"status_display":"Accepted","runtime":"1048 ms","url":"/submissions/detail/974510154/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"9.4 MB","code":"class Solution {\npublic:\n\n bool canPartitionKSubsets(vector<int>& nums, int k) {\n    \n      int sum =accumulate(nums.begin(),nums.end(),0);\n      vector<bool>vis(nums.size(),false);\n      if(sum%k!=0)\n        return false;\n      int s=sum/k;\n      sort(begin(nums),end(nums),greater<int>());// For avoid extra calculation\n      return is_possible(nums,0,s,k,0,vis);\n  }\n bool is_possible(vector<int>&nums,int curr,int sum,int k,int start,vector<bool>&vis)\n{\n        if(k==1)\n            return true;\n        if(start>=nums.size()) //This line is important to avoid tle\n           return false;\n        if(curr==sum)\n                return is_possible(nums,0,sum,k-1,0,vis);\n    \n    for(int i=start;i<nums.size();i++)\n    {\n        if(vis[i] || nums[i]+curr>sum)\n            continue;\n        vis[i]=true;\n        if(is_possible(nums,curr+nums[i],sum,k,i+1,vis))\n            return true;\n        vis[i]=false;\n    }\n        \n        return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false,"flag_type":1}