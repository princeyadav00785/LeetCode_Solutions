{"id":997827983,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1689704538,"status":10,"status_display":"Accepted","runtime":"449 ms","url":"/submissions/detail/997827983/","is_pending":"Not Pending","title":"LRU Cache","memory":"165 MB","code":"class LRUCache\n{\n    public:\n        list<pair<int,int>> l;\n        unordered_map<int,list<pair<int, int>>::iterator> m;\n        int size;\n        LRUCache(int capacity)\n        {\n            size=capacity;\n        }\n        int get(int key)\n        {\n            if(m.find(key)==m.end())\n                return -1;\n            l.splice(l.begin(),l,m[key]);\n            return m[key]->second;\n        }\n        void put(int key, int value)\n        {\n            if(m.find(key)!=m.end())\n            {\n                l.splice(l.begin(),l,m[key]);\n                m[key]->second=value;\n                return;\n            }\n            if(l.size()==size)\n            {\n                auto d_key=l.back().first;\n                l.pop_back();\n                m.erase(d_key);\n            }\n            l.push_front({key,value});\n            m[key]=l.begin();\n        }\n};","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}