{"id":1097011424,"lang":"javascript","lang_name":"JavaScript","time":"4 days, 16 hours","timestamp":1699761025,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1097011424/","is_pending":"Not Pending","title":"Maximum Strong Pair XOR II","memory":"N/A","code":"/**\n * Finds the maximum XOR among all strong pairs in the array.\n * @param {number[]} nums - The input array of integers.\n * @returns {number} - The maximum XOR value among all strong pairs.\n */\nvar maximumStrongPairXor = function(nums) {\n    // Sort the array in ascending order\n    nums.sort((firstNum, secondNum) => firstNum - secondNum);\n\n    // Get the length of the array\n    let arrayLength = nums.length;\n\n    // Initialize the result variable to store the maximum XOR value\n    let maxXOR = 0;\n\n    // Nested loop to iterate over all pairs of elements in the array\n    for (let i = 0; i < arrayLength; ++i) {\n        for (let j = i; j < arrayLength; ++j) {\n            // Check the condition for a strong pair\n            if (nums[j] - nums[i] <= nums[i]) {\n                // Update the result with the maximum XOR\n                maxXOR = Math.max(maxXOR, nums[i] ^ nums[j]);\n            } else {\n                // Break the inner loop if the condition is not satisfied\n                break;\n            }\n        }\n    }\n\n    // Return the maximum XOR value among all strong pairs\n    return maxXOR;\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100","title_slug":"maximum-strong-pair-xor-ii","has_notes":false,"flag_type":1}