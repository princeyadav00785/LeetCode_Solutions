{"id":980301958,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1687807895,"status":10,"status_display":"Accepted","runtime":"191 ms","url":"/submissions/detail/980301958/","is_pending":"Not Pending","title":"Total Cost to Hire K Workers","memory":"72.9 MB","code":"\n    \n    \n    class Solution {\npublic:\n    long long totalCost(vector<int>& costs, int k, int candidates) {\n        long long ans = 0;  // Variable to store the total cost\n        priority_queue<int, vector<int>, greater<int>> q1;  // Priority queue to store the lowest costs from the beginning of the array\n        priority_queue<int, vector<int>, greater<int>> q2;  // Priority queue to store the highest costs from the end of the array\n        int low = 0;  // Pointer to track the beginning of the array\n\n        // Insert 'candidates' number of costs into q1\n        while (low < candidates) {\n            q1.push(costs[low]);\n            low++;\n        }\n\n        int cnt = 0;\n        int high = (int)costs.size() - 1;  // Pointer to track the end of the array\n\n        // Adjust 'candidates' if it is greater than the number of elements from the end of the array\n        if (candidates > costs.size() - candidates) {\n            candidates = costs.size() - candidates;\n        }  \n\n        // Insert 'candidates' number of costs into q2 from the end of the array\n        while (cnt < candidates) {\n            q2.push(costs[high]);\n            cnt++;\n            high--;\n        }    \n\n        while (k--) {\n            if (q1.empty()) {  // If q1 is empty, take the lowest cost from q2\n                ans += q2.top();\n                q2.pop();\n                if (low <= high) {\n                    q2.push(costs[high]);\n                    high--;\n                }        \n            } else if (q2.empty()) {  // If q2 is empty, take the lowest cost from q1\n                ans += q1.top();\n                q1.pop();\n                if (low <= high) {\n                    q1.push(costs[low]);\n                    low++;\n                } \n            } else if (q1.top() <= q2.top()) {  // If the lowest cost in q1 is less than or equal to the lowest cost in q2, take the lowest cost from q1\n                ans += q1.top();\n                q1.pop();\n                if (low <= high) {\n                    q1.push(costs[low]);\n                    low++;\n                }\n            } else {  // If the lowest cost in q2 is less than the lowest cost in q1, take the lowest cost from q2\n                ans += q2.top();\n                q2.pop();\n                if (low <= high) {\n                    q2.push(costs[high]);\n                    high--;\n                }           \n            }\n        }\n        return ans;  // Return the total cost\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"total-cost-to-hire-k-workers","has_notes":false,"flag_type":1}