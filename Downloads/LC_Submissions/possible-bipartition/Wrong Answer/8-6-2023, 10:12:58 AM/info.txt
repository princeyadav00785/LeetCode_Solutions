{"id":1013524001,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1691296978,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1013524001/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"N/A","code":"class Solution {\npublic:\n    bool possibleBipartition(int n, vector<vector<int>>& nums) {\n        vector<int>v(n+1,0);\n      for(int i=0;i<nums.size();i++){\n          if(v[nums[i][0]]==0&&v[nums[i][1]]==0){\n              v[nums[i][0]]= 1;\n              v[nums[i][1]]=2;\n          }else{\n              if(v[nums[i][0]]==v[nums[i][1]]){\n                  return false;\n              }else{\n                   if(v[nums[i][0]]==0) {\n                       if(v[nums[i][1]]==2)\n                       v[nums[i][0]]= 1;\n                       else v[nums[i][0]]= 2;\n                           \n                   }\n            if(v[nums[i][1]]==0){ \n                if(v[nums[i][0]]==2)\n                v[nums[i][1]]=1;\n                else{\n                                 v[nums[i][1]]=2;   \n                }\n            }\n              }\n          }\n      }\n\n      return true;\n    }\n};","compare_result":"11111111110111110111010101010101010101010101010101010101010101010101011110","title_slug":"possible-bipartition","has_notes":false,"flag_type":1}