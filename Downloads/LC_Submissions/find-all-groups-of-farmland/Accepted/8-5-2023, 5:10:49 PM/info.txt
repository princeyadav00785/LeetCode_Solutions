{"id":1012822772,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1691235649,"status":10,"status_display":"Accepted","runtime":"197 ms","url":"/submissions/detail/1012822772/","is_pending":"Not Pending","title":"Find All Groups of Farmland","memory":"113.5 MB","code":"class Solution {\npublic:\n    vector<vector<int>> nbrs = {{0,1},{1,0},{-1,0},{0,-1}};\n    pair<int, int> dfs(vector<vector<int>> &land, int i, int j, vector<vector<bool>> &visited) {\n        visited[i][j] = true;\n        pair<int, int> res  = make_pair(i, j);\n        for(auto &nbr: nbrs) {\n            int x = i + nbr[0];\n            int y = j + nbr[1];\n            if(x < 0 || y < 0 || x >= land.size() || y >= land[0].size() || visited[x][y] || land[x][y] != 1)\n                continue;\n            pair<int, int> ans = dfs(land, x, y, visited);\n            res.first = max(res.first, ans.first);\n            res.second = max(res.second, ans.second);\n        }\n        return res;\n    }\n    vector<vector<int>> findFarmland(vector<vector<int>>& land) {\n        int m = land.size();\n        int n = land[0].size();\n        vector<vector<bool>> visited(m, vector<bool>(n, false));\n        vector<vector<int>> ans;\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(!visited[i][j] && land[i][j] == 1) {\n                    pair<int, int> p = dfs(land, i, j, visited);\n                    vector<int> res;\n                    res.push_back(i);\n                    res.push_back(j);\n                    res.push_back(p.first);\n                    res.push_back(p.second);\n                    ans.push_back(res);\n                    cout << 1 << endl;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n// vector<vector<int>> findFarmland(vector<vector<int>>& land) {\n//     int m = land.size(), n = land[0].size();\n//     vector<vector<int>> res;\n//     for (int i = 0; i < m; ++i)\n//         for (int j = 0; j < n; ++j) {\n//             if (land[i][j]) {\n//                 int x = i, y = j;\n//                 for (x = i; x < m && land[x][j]; ++x)\n//                     for (y = j; y < n && land[x][y]; ++y)\n//                         land[x][y] = 0;\n//                 res.push_back({i, j, x - 1, y - 1});\n//             }\n//         }\n//     return res;\n// }","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-groups-of-farmland","has_notes":false,"flag_type":1}