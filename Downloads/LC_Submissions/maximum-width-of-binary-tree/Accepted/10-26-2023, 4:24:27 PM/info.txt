{"id":1084535894,"lang":"cpp","lang_name":"C++","time":"3Â weeks","timestamp":1698317667,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1084535894/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"17.6 MB","code":"class Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if (!root)\n            return 0;\n\n        queue<pair<TreeNode*, unsigned long long>> q;\n        q.push({root, 1});\n        int maxWidth = 1;\n\n        while (!q.empty()) {\n            int size = q.size();\n            unsigned long long leftmost = q.front().second;\n\n            for (int i = 0; i < size; i++) {\n                auto nodePair = q.front();\n                TreeNode* node = nodePair.first;\n                unsigned long long position = nodePair.second;\n                q.pop();\n\n                if (node->left) {\n                    q.push({node->left, 2 * position});\n                }\n\n                if (node->right) {\n                    q.push({node->right, 2 * position + 1});\n                }\n\n                maxWidth = max(maxWidth, static_cast<int>(position - leftmost + 1));\n            }\n        }\n\n        return maxWidth;\n    }\n};\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}