{"id":1013972268,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1691338953,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1013972268/","is_pending":"Not Pending","title":"Longest Ideal Subsequence","memory":"N/A","code":"class Solution {\npublic:\n    int longestIdealString(string s, int k) {\n        vector<int>dp(s.length(),1);\n        int mxm=0;\n        for(int i=0;i<s.length();i++){\n            for(int j=0;j<i;j++){\n                if(abs(s[j]-s[i])<=k){\n                    dp[i]=dp[j]+1;\n                   \n                }\n                 \n            }\n            mxm=max(mxm,dp[i]);\n        }\n        return mxm;\n    }\n};\n\n// for (int i = 0; i < s.size(); i++) {\n// \t\t\tint ind = s[i] - 'a';\n// \t\t\tint ans = 1;\n// \t\t\tfor (int j = 0; j < 26; j++) {\n// \t\t\t\tif (abs(j - ind) <= k) {\n// \t\t\t\t\tans = max(ans, dp[j] + 1);\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tdp[ind] = ans;\n// \t\t}\n// \t\treturn *max_element(dp.begin(), dp.end());\n\n// int longestIdealString(string s, int k) {\n//         int dp[150] = {}, res = 0;\n//         for (auto& i : s) {\n//             for (int j = i - k; j <= i + k; ++j)\n//                 dp[i] = max(dp[i], dp[j]);\n//             res = max(res, ++dp[i]);\n//         }\n//         return res;\n//     }","compare_result":"1110011111111111111111101001111011011011111100000001001000110000000000000000000000000","title_slug":"longest-ideal-subsequence","has_notes":false,"flag_type":1}