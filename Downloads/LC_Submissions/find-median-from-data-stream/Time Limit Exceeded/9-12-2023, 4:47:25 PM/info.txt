{"id":1047391069,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1694517445,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1047391069/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"N/A","code":"class MedianFinder {\npublic:\n    // vector<double>v;\n    priority_queue<double>q;\n    int n=0;\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        double d= (double)num;\n        // v.push_back(d);\n        q.push(d);\n        n++;\n    }\n    \n    double findMedian() {\n        // sort(v.begin(),v.end());\n        // int n=v.size();\n        // cout<<n<<\" \";\n        priority_queue<double>p=q;\n        if(n%2!=0)\n            // return v[n/2];\n        {\n            int k= n/2;\n            while(k--){\n               p.pop(); \n            }\n            double ans= p.top();\n            return ans;\n            \n        }\n        else \n            // return (v[n/2]+v[n/2-1])/2.0;\n        {\n         int k= n/2-1;\n            while(k--){\n                p.pop();\n            }\n            double a=p.top();\n            p.pop();\n            double b= p.top();\n            return (a+b)/2.0;\n            \n        }\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111100000","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}