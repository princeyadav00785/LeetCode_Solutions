{"id":965812197,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1686133391,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/965812197/","is_pending":"Not Pending","title":"Path Sum II","memory":"19.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n   vector<vector<int>> answer;\n    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {\n        vector<int> path;\n        dfs(root, targetSum, path);// using dfs to traverse on each node\n        return answer;\n    }\n    void dfs(TreeNode* root, int newtarget, vector<int>& path) {\n        if (!root) return; // if current root is null return\n        path.push_back(root->val);\n        newtarget -= root->val; // new target will be the privious target- the value of that node\n        if (!root->left && !root->right) { // check whether it is a leaf node or not\n            if (newtarget == 0) // if we get valid path, pushback in our answer\n                answer.push_back(path);\n        } else {\n            dfs(root->left, newtarget, path);\n            dfs(root->right, newtarget, path);\n        }\n        path.pop_back(); // for the backtracking  \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii","has_notes":false,"flag_type":1}