{"id":1083162497,"lang":"cpp","lang_name":"C++","time":"3 weeks, 2 days","timestamp":1698167415,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1083162497/","is_pending":"Not Pending","title":"Find Largest Value in Each Tree Row","memory":"23.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> largestValues(TreeNode* root) {\n        if(root==NULL)return {};\n        vector<vector<int>>v;\n        vector<int>ans;\n        queue<TreeNode*>q;\n        q.push(root);\n        while(!q.empty()){\n            int n= q.size();\n            vector<int>temp;\n            for(int i=0;i<n;i++){\n                TreeNode* t=q.front();\n                int N= t->val;\n                q.pop();\n               if(t->right)q.push(t->right);\n                if(t->left)q.push(t->left);\n                temp.push_back(N);\n            }\n            v.push_back(temp);\n        }\n        \n        for(int i=0;i<v.size();i++){\n            int mxm=INT_MIN;\n            for(int j=0;j<v[i].size();j++){\n                if(v[i][j]>mxm)mxm=v[i][j];\n            }\n            ans.push_back(mxm);\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-largest-value-in-each-tree-row","has_notes":false,"flag_type":1}