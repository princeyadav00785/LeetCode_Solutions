{"id":1046621143,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1694445835,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1046621143/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"28.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n \n bool areSame(TreeNode* root, TreeNode* subRoot){\n   if(root==NULL||subRoot==NULL)return root==subRoot;\n\n        return (root->val == subRoot->val && areSame(root->left, subRoot->left) && areSame(root->right, subRoot->right));\n    }\n\n    void traverse(TreeNode* root, TreeNode* subRoot, bool &ans){\n        if(ans) return; \n        if(root->val == subRoot->val && areSame(root, subRoot)){\n            ans = true;\n            return;\n        }\n\n        if(root->left) traverse(root->left, subRoot, ans);\n        if(root->right) traverse(root->right, subRoot, ans);\n    }\n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n        bool ans = false;\n        traverse(root, subRoot, ans);\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}