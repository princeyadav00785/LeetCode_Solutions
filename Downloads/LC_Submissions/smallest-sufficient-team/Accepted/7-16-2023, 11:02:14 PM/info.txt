{"id":996058603,"lang":"java","lang_name":"Java","time":"4Â months","timestamp":1689528734,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/996058603/","is_pending":"Not Pending","title":"Smallest Sufficient Team","memory":"46.7 MB","code":"class Solution {\n  public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {\n        int n = req_skills.length, m = people.size();\n        HashMap<String, Integer> skill_index = new HashMap<>();\n        for (int i = 0; i < n; ++i)\n            skill_index.put(req_skills[i], i);\n        List<Integer>[] dp = new List[1 << n];\n        dp[0] = new ArrayList<>();\n        for (int i = 0; i < m; ++i) {\n            int cur_skill = 0;\n            for (String s : people.get(i))\n                cur_skill |= 1 << skill_index.get(s);\n            for (int prev = 0; prev < dp.length; ++prev) {\n                if (dp[prev] == null) continue;\n                int comb = prev | cur_skill;\n                if (dp[comb] == null || dp[prev].size() + 1 < dp[comb].size()) {\n                    dp[comb] = new ArrayList<>(dp[prev]);\n                    dp[comb].add(i);\n                }\n            }\n        }\n        return dp[(1 << n) - 1].stream().mapToInt(i -> i).toArray();\n    }}","compare_result":"11111111111111111111111111111111111111","title_slug":"smallest-sufficient-team","has_notes":false,"flag_type":1}