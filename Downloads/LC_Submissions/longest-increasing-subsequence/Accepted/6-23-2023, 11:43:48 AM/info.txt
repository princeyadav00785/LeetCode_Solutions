{"id":977624434,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1687500828,"status":10,"status_display":"Accepted","runtime":"1427 ms","url":"/submissions/detail/977624434/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"292.4 MB","code":"class Solution {\npublic:\n    int fxn(int ind,int prevind,int n,vector<int>&nums,        vector<vector<int>>&dp){\n        if(ind ==n)return 0;\n        if(dp[ind][prevind+1]!=-1)return dp[ind][prevind+1];\n        int take=0;\n            int ntake=0;\n        ntake= fxn(ind+1,prevind,n,nums,dp);\n        if(prevind==-1||nums[ind]>nums[prevind]){\n            take= 1+fxn(ind+1,ind,n,nums,dp);\n        }\n        return dp[ind][prevind+1] =max(take,ntake);\n    }\n    \n    \n    int lengthOfLIS(vector<int>& nums) {\n        int n= nums.size();\n        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));\n        return fxn(0,-1,nums.size(),nums,dp);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}