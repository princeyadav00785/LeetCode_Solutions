{"id":985034318,"lang":"cpp","lang_name":"C++","time":"4 months, 2 weeks","timestamp":1688362994,"status":10,"status_display":"Accepted","runtime":"67 ms","url":"/submissions/detail/985034318/","is_pending":"Not Pending","title":"Linked List Components","memory":"24.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int numComponents(ListNode* head, vector<int>& nums) {\n        ListNode* temp= head;\n        map<int,int>mp;\n        for(auto x:nums){mp[x]++;}\n       int cnt=0;\n        while(temp){\n            if(mp[temp->val]){\n                cnt++;\n                while(temp!=NULL&&mp[temp->val]){\n                    temp=temp->next;\n                }\n            }else temp=temp->next;\n        }\n        return cnt;\n    }\n};\n\n // int count = 0;\n //        ListNode node = head;\n //        Set<Integer> set = new HashSet<>();\n //        for (int i : G) {\n //            set.add(i);\n //        }\n //        while (node != null) {\n //            if (set.contains(node.val)) {\n //                count++;\n //                while (node != null && set.contains(node.val)) {\n //                    node = node.next;\n //                }\n //            } else {\n //                node = node.next;\n //            }\n //        }\n //        return count;","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"linked-list-components","has_notes":false,"flag_type":1}