{"id":977647316,"lang":"cpp","lang_name":"C++","time":"4 months, 3 weeks","timestamp":1687503016,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/977647316/","is_pending":"Not Pending","title":"Largest Divisible Subset","memory":"8.8 MB","code":"class Solution {\npublic:\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> dp(n, 1), parent(n, -1);\n        int maxLength = 1, lastIndex = 0;\n\n        sort(nums.begin(), nums.end());\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] % nums[j] == 0 && 1 + dp[j] > dp[i]) {\n                    dp[i] = 1 + dp[j];\n                    parent[i] = j;\n                }\n            }\n\n            if (dp[i] > maxLength) {\n                maxLength = dp[i];\n                lastIndex = i;\n            }\n        }\n\n        vector<int> result;\n        while (lastIndex != -1) {\n            result.push_back(nums[lastIndex]);\n            lastIndex = parent[lastIndex];\n        }\n\n        return result;\n    }\n};\n","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"largest-divisible-subset","has_notes":false,"flag_type":1}