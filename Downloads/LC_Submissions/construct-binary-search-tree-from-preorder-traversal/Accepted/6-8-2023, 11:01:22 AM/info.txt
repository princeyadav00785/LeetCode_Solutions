{"id":966373679,"lang":"cpp","lang_name":"C++","time":"5 months, 1 week","timestamp":1686202282,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/966373679/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"17.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* fxn(vector<int>v,int& i , int bound){\n        \n        if(i==v.size()||v[i]>bound )return NULL;\n        TreeNode* root = new TreeNode(v[i++]);\n        root->left= fxn(v,i,root->val);\n        root->right=fxn(v,i,bound);\n        return root;\n        \n        \n//           if(i==A.size() || A[i]>bound) return NULL;\n//     TreeNode* root= new TreeNode(A[i++]);\n//     root->left=build(A,i,root->val);\n//     root->right=build(A,i,bound);\n//     return root;\n    }\n    \n    TreeNode* bstFromPreorder(vector<int>& v) {\n        int i=0,bound =INT_MAX;\n        return fxn(v,i,bound);\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}