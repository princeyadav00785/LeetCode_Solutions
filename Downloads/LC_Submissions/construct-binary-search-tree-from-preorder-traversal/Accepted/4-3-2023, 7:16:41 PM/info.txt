{"id":927229259,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1680529601,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/927229259/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"13.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // TreeNode* build(vector<int>&v,int &i,int bound){\n    //     // (vector<int> &A, int &i, int bound)\n    //     if(i==v.size()||v[i]>bound)return NULL;\n    //     TreeNode* node= new TreeNode(v[i++]);\n    //     node->right=build(v,i,bound);\n    //     node->left=build(v,i,node->val);\n    //     return node;\n    //      if(i==A.size() || A[i]>bound) return NULL;\n    // TreeNode* root= new TreeNode(A[i++]);\n    // root->left=build(A,i,root->val);\n    // root->right=build(A,i,bound);\n    // return root;\n    // }\n    \n    // TreeNode* bstFromPreorder(vector<int>& preorder) {\n    //     int i=0;\n    //     return build(preorder,i,INT_MAX);\n    // }\n    TreeNode* bstFromPreorder(vector<int>& A) \n{\n    int i=0;\n    return build(A,i,INT_MAX);   \n}\nTreeNode* build(vector<int> &A, int &i, int bound){\n   if(i==A.size() || A[i]>bound) return NULL;\n    TreeNode* root= new TreeNode(A[i++]);\n    root->left=build(A,i,root->val);\n    root->right=build(A,i,bound);\n    return root;\n}\n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}