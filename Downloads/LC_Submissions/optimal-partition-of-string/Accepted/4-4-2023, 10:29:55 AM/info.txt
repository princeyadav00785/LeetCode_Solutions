{"id":927630799,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1680584395,"status":10,"status_display":"Accepted","runtime":"1032 ms","url":"/submissions/detail/927630799/","is_pending":"Not Pending","title":"Optimal Partition of String","memory":"72.1 MB","code":"class Solution {\npublic:\n    int partitionString(string s) {\n        map<char,int>q;\n        int cnt=0;\n       q[s[0]]++;\n        if(s.length()==1){return 1;}\n        if(s.length()==2&&s[0]!=s[1]){return 2;}else if(s.length()==2&&s[0]==s[1]){return 1;}\n        int i=1;\n        while(i<s.length()){\n            if(q.find(s[i])==q.end()) {\n               q[s[i]]++;\n            }else{\n                for(auto x:q){\n                    cout<<x.first<<\" \";\n                }cout<<endl;\n                cnt++;\n                q.clear();\n                  q[s[i]]++;\n            }\n            \n            i++;\n        }\n         if(!q.empty()) cnt++;\n        return cnt;\n        \n//               unordered_map<int, int> mp;\n//         int high=0, cnt=0;\n        \n//         while(high<s.size())\n//         {\n//             if(mp.find(s[high]-'a') != mp.end())\n//             {\n//                 mp.clear();\n//                 cnt++;\n//             }\n//             mp[s[high]-'a'] = high;\n//             high++;\n//         }\n//         if(!mp.empty()) cnt++;\n//         return cnt;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"optimal-partition-of-string","has_notes":false,"flag_type":1}