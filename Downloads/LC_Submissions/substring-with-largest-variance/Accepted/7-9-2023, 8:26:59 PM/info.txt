{"id":990236102,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1688914619,"status":10,"status_display":"Accepted","runtime":"251 ms","url":"/submissions/detail/990236102/","is_pending":"Not Pending","title":"Substring With Largest Variance","memory":"41.3 MB","code":"class Solution {\n    public int largestVariance(String s) {\n        \n        int [] freq = new int[26];\n        for(int i = 0 ; i < s.length() ; i++)\n            freq[(int)(s.charAt(i) - 'a')]++;\n        \n        int maxVariance = 0;\n        for(int a = 0 ; a < 26 ; a++){\n            for(int b = 0 ; b < 26 ; b++){\n                int remainingA = freq[a];\n                int remainingB = freq[b];\n                if(a == b || remainingA == 0 || remainingB == 0) continue;\n                \n\t\t\t\t// run kadanes on each possible character pairs (A & B)\n                int currBFreq = 0, currAFreq = 0;\n                for(int i = 0 ; i < s.length() ; i++){\n                    int c =  (int)(s.charAt(i) - 'a');\n                    \n                    if(c == b) currBFreq++;\n                    if(c == a) {\n                        currAFreq++;\n                        remainingA--;\n                    }\n                    \n                    if(currAFreq > 0)\n                        maxVariance = Math.max(maxVariance, currBFreq - currAFreq);\n                    \n                    if(currBFreq < currAFreq &&  remainingA >= 1){\n                        currBFreq = 0;\n                        currAFreq = 0;\n                    }\n                }\n            }\n        }\n        \n        return maxVariance;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substring-with-largest-variance","has_notes":false,"flag_type":1}